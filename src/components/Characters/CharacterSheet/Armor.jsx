import React, { useState } from 'react';
import { Button } from '@mui/material';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';
import { useSelector, useDispatch } from 'react-redux';
import { styled } from '@mui/material/styles';

// need to make armorBuilder function to create boxes and labels. Will have to be based on incoming character prop 
// e.g. 'active_armor' & 'active_cyberware' from reducer generated by character fetching process.
// all armor state should exist, and upon closing/saving character changes will affect reducer and then hit database.

// should be able to change this to dynamically rendered item.

function Armor(charDetailProp) {
    
    const charDetailArmor = charDetailProp.charDetailProp.max_armor
    const charStatus = useSelector(store => store.characterStatus)
    
    const dispatch = useDispatch();
    const unhurtMarker = `\u2610`;
    const aggMarker = `\u2718`;

    // add dispatch to update current_armor
    const armorBoxChanger = (e) => {
        if (e.target.innerText === unhurtMarker) {
            e.target.innerText = aggMarker
            dispatch({type: "REMOVE_ONE_ARMOR"})
        } else if (e.target.innerText === aggMarker) {
            e.target.innerText = unhurtMarker
            dispatch({type: "ADD_ONE_ARMOR"})
        }
    }

    const armorDamageBuilder = (ablated) => {
        let ablatedArray = []
        for (let i = 0; i < ablated; i++) {
            ablatedArray.push(aggMarker)
        }
        
        if (ablatedArray.length < charDetailArmor) {
            let remainder = charDetailArmor - ablated
            for (let i = 0; i < remainder; i++) {
                ablatedArray.push(unhurtMarker)
            }
        }
        return ablatedArray
    }

    const armorBuilder = () => {
        let armorBoxes = []
        let armorArray = armorDamageBuilder(charStatus.current_armor_loss)
        for (let i = 0; i < charDetailArmor; i++ ) {
            armorBoxes.push(
                <React.Fragment key={i}>
                <Grid item xs={2.4}><Item onClick={(e) => armorBoxChanger(e)}>{armorArray[i]}</Item></Grid>
                </React.Fragment>
            )
        }
        return armorBoxes
    }

    const Item = styled(Paper)(({ theme }) => ({
        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
        ...theme.typography.body2,
        padding: theme.spacing(1),
        textAlign: 'center',
        color: theme.palette.text.secondary,
    }));

    return (
        <>
            <Item >Armor</Item>
            <Grid container>
                {armorBuilder()}
            </Grid>
        </>
    )
}

export default Armor;