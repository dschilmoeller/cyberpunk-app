import React, { useState } from 'react';
import { Button } from '@mui/material';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';

import { styled } from '@mui/material/styles';

// need to make armorBuilder function to create boxes and labels. Will have to be based on incoming character prop 
// e.g. 'active_armor' & 'active_cyberware' from reducer generated by character fetching process.
// all armor state should exist, and upon closing/saving character changes will affect reducer and then hit database.

function Armor(charDetailProp) {
    // special character storage
    const charDetailArmor = charDetailProp.charDetailProp.max_armor

    const unhurtMarker = `\u2610`;
    const stunMarker = `\u2736`;
    const lethalMarker = `\uFE45`;
    const aggMarker = `\u2718`;

    const [armorBox1, setArmorBox1] = useState(unhurtMarker)
    const [armorBox2, setArmorBox2] = useState(unhurtMarker)
    const [armorBox3, setArmorBox3] = useState(unhurtMarker)
    const [armorBox4, setArmorBox4] = useState(unhurtMarker)
    const [armorBox5, setArmorBox5] = useState(unhurtMarker)
    const [armorBox6, setArmorBox6] = useState(unhurtMarker)
    const [armorBox7, setArmorBox7] = useState(unhurtMarker)
    const [armorBox8, setArmorBox8] = useState(unhurtMarker)
    const [armorBox9, setArmorBox9] = useState(unhurtMarker)
    const [armorBox10, setArmorBox10] = useState(unhurtMarker)

    // add dispatch to update current_armor
    const armorBoxChanger = (incoming) => {
        switch (incoming) {
            case `\u2610`:
                return aggMarker;
            case `\u2718`:
                return unhurtMarker;
        }
    }

    const Item = styled(Paper)(({ theme }) => ({
        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
        ...theme.typography.body2,
        padding: theme.spacing(1),
        textAlign: 'center',
        color: theme.palette.text.secondary,
    }));

    return (
        <>
            <Item >Armor Ablation</Item>
            <Grid container>
                {charDetailArmor > 0 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 1 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 2 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 3 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 4 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 5 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 6 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 7 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 8 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
                {charDetailArmor > 9 ? <Grid item xs={1.2}><Item>Armor</Item></Grid> : <></>}
            </Grid>
            <Grid container>
                {charDetailArmor > 0 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox1(armorBoxChanger(armorBox1))}>{armorBox1}</Item></Grid> : <></>}
                {charDetailArmor > 1 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox2(armorBoxChanger(armorBox2))}>{armorBox2}</Item></Grid> : <></>}
                {charDetailArmor > 2 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox3(armorBoxChanger(armorBox3))}>{armorBox3}</Item></Grid> : <></>}
                {charDetailArmor > 3 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox4(armorBoxChanger(armorBox4))}>{armorBox4}</Item></Grid> : <></>}
                {charDetailArmor > 4 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox5(armorBoxChanger(armorBox5))}>{armorBox5}</Item></Grid> : <></>}
                {charDetailArmor > 5 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox6(armorBoxChanger(armorBox6))}>{armorBox6}</Item></Grid> : <></>}
                {charDetailArmor > 6 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox7(armorBoxChanger(armorBox7))}>{armorBox7}</Item></Grid> : <></>}
                {charDetailArmor > 7 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox8(armorBoxChanger(armorBox8))}>{armorBox8}</Item></Grid> : <></>}
                {charDetailArmor > 8 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox9(armorBoxChanger(armorBox9))}>{armorBox9}</Item></Grid> : <></>}
                {charDetailArmor > 9 ? <Grid item xs={1.2}><Item onClick={() => setArmorBox10(armorBoxChanger(armorBox10))}>{armorBox10}</Item></Grid> : <></>}
            </Grid>
        </>
    )
}

export default Armor;